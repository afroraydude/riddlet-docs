{
    "docs": [
        {
            "location": "/",
            "text": "Riddlet is a custom wrapper for Socket.IO that allows for anonymous chat between users.\n\n\nThere are two different parts:\n\n\nThe Server\n\n\nThe server software, titled \nriddlet-server\n is what handles everything to do with server operations like authentication, message handling, and custom software.\n\n\nThe client\n\n\nThe client can be a bot, web client, or mobile client.",
            "title": "Home"
        },
        {
            "location": "/#the-server",
            "text": "The server software, titled  riddlet-server  is what handles everything to do with server operations like authentication, message handling, and custom software.",
            "title": "The Server"
        },
        {
            "location": "/#the-client",
            "text": "The client can be a bot, web client, or mobile client.",
            "title": "The client"
        },
        {
            "location": "/client-commands/",
            "text": "Client Commands\n\n\n/join <#channel>\n - Joins channel\n\n\n/leave <#channel>\n - Leaves channel (if already joined)\n\n\n/switch <#channel>\n - Switches to channel",
            "title": "Commands"
        },
        {
            "location": "/client-commands/#client-commands",
            "text": "/join <#channel>  - Joins channel  /leave <#channel>  - Leaves channel (if already joined)  /switch <#channel>  - Switches to channel",
            "title": "Client Commands"
        },
        {
            "location": "/install/",
            "text": "Installation\n\n\nInstalling \nriddlet-server\n is very simplistic.\n\n\n\n\nDownload the latest version of Node.js and NPM\n\n\nInstall a C++11 compiler. For linux, something like \nmake\n. For Windows, \nnpm install -g windows-build-tools\n should work.\n\n\nRun \nnpm install --save riddlet-server",
            "title": "Server Installation"
        },
        {
            "location": "/install/#installation",
            "text": "Installing  riddlet-server  is very simplistic.   Download the latest version of Node.js and NPM  Install a C++11 compiler. For linux, something like  make . For Windows,  npm install -g windows-build-tools  should work.  Run  npm install --save riddlet-server",
            "title": "Installation"
        },
        {
            "location": "/start/",
            "text": "Your first Riddlet Server\n\n\nStarting up your first Riddlet Server is simple. You actually only need to place one line inside of your server.js file.\n\n\nvar riddlet = require(\"riddlet-server\").Riddlet()\n\n\n\n\nThen in your terminal, run \nnode server.js\n and Riddlet will run on either your \nport\n environment variable or port 8000.\n\n\nIf you want to attach it to an already existing HTTP server, just attach it.\n\n\nvar http = require('http');\n\napp = http.createServer();\n\nvar riddlet = require(\"riddlet-server\").Riddlet(app)\n\nconst port = process.env.port || 8080;\napp.listen(port);\nconsole.log(\"http listening on port \", port);\n\n\n\n\nMake sure that the current directory of your \njs\n file can be written to and read from. This is necessary for any version above \nv0.10.6",
            "title": "First Server"
        },
        {
            "location": "/start/#your-first-riddlet-server",
            "text": "Starting up your first Riddlet Server is simple. You actually only need to place one line inside of your server.js file.  var riddlet = require(\"riddlet-server\").Riddlet()  Then in your terminal, run  node server.js  and Riddlet will run on either your  port  environment variable or port 8000.  If you want to attach it to an already existing HTTP server, just attach it.  var http = require('http');\n\napp = http.createServer();\n\nvar riddlet = require(\"riddlet-server\").Riddlet(app)\n\nconst port = process.env.port || 8080;\napp.listen(port);\nconsole.log(\"http listening on port \", port);  Make sure that the current directory of your  js  file can be written to and read from. This is necessary for any version above  v0.10.6",
            "title": "Your first Riddlet Server"
        },
        {
            "location": "/adapters/",
            "text": "Adapters\n\n\nWhat is an \"Adapter\"?\n\n\nAdapters are extensions for Riddlet Server. They can be objects with functions or classes with functions. Adapters allow you to handle messages on your own.\n\n\nThe functions of an Adapter\n\n\nAll adapter functions\n\n\nAll adapter functions recieve specific parameters. They are as follows:\n\n\n\n\nio\n: The inner socket.io object, use for anything with the server-side of message handling (sending messages, rooms, sockets) (object)\n\n\nsocket\n: The socket the message came from (object)\n\n\nmessage\n: The message in question (object)\n\n\nmessages\n: the last messages sent (array of \nmessage\n)\n\n\nserverInfo\n: The server's public info (object)\n\n\nuser\n: The user's token, decoded (object)\n\n\n\n\nbeforeMessage()\n\n\nThis is ran before the normal message handler is loaded. If you wanted to handle custom commands, socket attributes, or otherwise modify any of the parameters, you would do it in this function.\n\n\nafterMessage()\n\n\nThis is ran right after the default message handler. If you wanted to keep messages for long term storage, you would probably handle that within this function.",
            "title": "Creating an adapter"
        },
        {
            "location": "/adapters/#adapters",
            "text": "",
            "title": "Adapters"
        },
        {
            "location": "/adapters/#what-is-an-adapter",
            "text": "Adapters are extensions for Riddlet Server. They can be objects with functions or classes with functions. Adapters allow you to handle messages on your own.",
            "title": "What is an \"Adapter\"?"
        },
        {
            "location": "/adapters/#the-functions-of-an-adapter",
            "text": "",
            "title": "The functions of an Adapter"
        },
        {
            "location": "/adapters/#all-adapter-functions",
            "text": "All adapter functions recieve specific parameters. They are as follows:   io : The inner socket.io object, use for anything with the server-side of message handling (sending messages, rooms, sockets) (object)  socket : The socket the message came from (object)  message : The message in question (object)  messages : the last messages sent (array of  message )  serverInfo : The server's public info (object)  user : The user's token, decoded (object)",
            "title": "All adapter functions"
        },
        {
            "location": "/adapters/#beforemessage",
            "text": "This is ran before the normal message handler is loaded. If you wanted to handle custom commands, socket attributes, or otherwise modify any of the parameters, you would do it in this function.",
            "title": "beforeMessage()"
        },
        {
            "location": "/adapters/#aftermessage",
            "text": "This is ran right after the default message handler. If you wanted to keep messages for long term storage, you would probably handle that within this function.",
            "title": "afterMessage()"
        }
    ]
}